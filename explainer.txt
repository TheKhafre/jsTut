###### Using Equality Operator in JS ######

When we use double equal sign (==) in javascript, it does something called auto-conversion which converts the two objects to the same datatype and then compares them. However, this is not a really good thing in all cases. Here is an example to illustrate this point:
    suppose we have two values 5 and '5.00', logically, this two objects are not the same as one is a string while the other is a number. But, when we compare then using double equals to, it will return "true" because it converts the two to the same type and then see if the values are the same.

To remedy this kind of problem in javascript, that is why we use the triple equals to (===) operator to prevent auto conversion.

Foot Note: comparison operators (<,>, =, !) have a lower priority than math operators (+,-,*,/). However it has a greater priority to the logical operaters (&&, ||, !).

#### ROCK, PAPER, SCISSORS #####

Rock BEAT Scissors
Paper BEAT Rock
Scissors BEAT Paper

To generate a random number in js, we use the Math.random function. The Math.random function generates number between 0 and 1 i.e greater than zero but less than 1.

To use this for the rock paper Scissors, we need to check each of the computer generated random value with each of the game mode. Here is a good way for that to play out: if the number generated by random is less than 1/3, then we call it rock; if it is greater then 1/3 but less than 2/3 (i.e > 1/3 && <2/3), then we call it paper; lastly, if this value is greater than 2/3, then it will be scissors.

footnote: NaN = Not a Number; this happens when we try to do an invalid math operation such as dividing a string by a number. Furthermore, to declare an uninitialized variable, we can only do that with var and let. if we use const to declare an uninitialized variable, it will run into an error, to do that, we need to assign the variable a value of undefined. e.g
    const myVar = undefined;


#### CATCH THIS ##########

a ternary operator is a shorthand if-else statement. it works as follows: if the first part is a true statement, then the result will be the statement that follows immendiately after the question mark. Else, the result is the statement after the colon.
e.g: 1 > 0 ? 'this is true' : 'this is a false statement' 

####### Object Orineted Programming ########

to declare an object, we use the syntax:
    const name = {
        key: value,
        key: value,
        ...
    };

it is important to terminate it with a semicolon to signal the end of the object. To access this object we use:
1. The dot notation eg name.key this will fetch the value of the amed object key. 
2. The bracket notation e.g name['key']. The two method works the same way but the dot notation has a setback that makes the square notation handy in some situations. For example suppose our key name is hyphenated e.g my-key, if we try to access it using the dot notaion i.e
    name.my-key
you might run into an erro because javascript could attempt to perfom a mathematical operation on it. in this kind of sceario, the square notation is the best option to go with i.e
    name['my-key']

PS: We also need to use the square notation when using a key name that requires an hyphen when creating an object. e.g
    const name = {
        key: value,
        ['my-key']: value
    }
without the square bracket, you might fall into an uncaught syntax error. But, a simple point to note here is that it wil also work without the sqaure bracket if we turn it to a string i.e
    const name = {
        key: value,
        'my-key': value
    }

Furthermore, we can also add any kind of datatype inside an object such as int, string, boolean etc. but this does not remove objects as well. What this mean is that we also add another object inside an object known as nested object. e.g:
    const name = {
        key: value,
        ['my-key']: value
        rating: {
            stars: 4.5,
            count: 87
        }
    };
and also functions as well. e.g:
    const name = {
        key: value,
        ['my-key']: value
        rating: {
            stars: 4.5,
            count: 87
        } 
        fname: function my_func(){
            console.log('hello world');
        }
    };

to call the function, we use the object name followed by the function name i.e:
    name.fname();
with this example, we will realize that console.log is an example of object with function as console is the name of the object while log is a function inside it. This kind of object-function relationship is known as an object.


##### JSON ##########
By simple/direct definition, json is an object notation that has a similatr javascript object syntax but with less features. one important place to start is that json has a strict double quote rule when declaring strings i.e unlike javascript that accepts both, json can only be written with double quote.

furthermore, it alos supports every other things the js objects support except for functions i.e a function can not be written as a nested feature in the json syntax. however, most of the other features are supported.

using the object example as above, here is an example from a json perspective:
    const name = {
        "key": "value",
        "my-key": "value"
        "rating": {
            "stars": 4.5,
            "count": 87
        }
    };  

while dealing with objects, when we try to copy the content of an object key to a variable, if the variables have the same name, we simply destructure by wrapping it in a curly braces and say equal to the object name.

here is an example: suppose we have an object called userID, with a key value as follows
    const userID = {
        name: 'oluwatobi'
    };
if we want to copy this name key inside the object to another outside variable also name, i.e
    const name = userID.name;
instead of writing it as above, we simply say:
const { name } = userID;

for multiple keys, we just separate with a comma

###### JSON localStorage
This is used to save a more permanent data using json. This is because when we use the json localstorage, it saves the data on  the machine for retriever at at a later call.

the localStorage method uses the synthax:
    localStorage.setItem(name, value)
to retrieve the value saved in localStorage, we use:
    localStorage.getItem(name)

Note: localstorage only supports string value.

######## Auto-Boxing Property of String in JS ####
Javascript automatically boxes a string that it receives. As a result of this, we can perform other operations on the strings such as checking the string ength, changing the cases, and so on.
e.g     hello.toUpperCase()

#### Document Object Model (DOM) ####
The DOM is the most powerful built-in object in javascript. it contains some interesting methods that can manipulate the webpage and also change how we interact with the page. this is how we add interactivity to the webpage. 

some interesting basic DOM methods include:
    document.body //This gives us the control of the body
    document.title // give control of the title

    e.g document.title = 'Changed' 
    this will change the page title to Changed.

However, when we deal with the document.body, we need to undeerstand that this is a next level object i.e a nested object which mean there are also many other things we can do with the document.body, e.g we can change the entire body to "changed" by using the innerHTML of the body object as follows:
    document.body.innerHTML = 'Changed'

The document.querySelector is one of the DOM process that helps us get an element from the HTML page and put inside the javascript. e.g. 
	document.querySelector("button")
This query selector will only selct the first button it finds on the page and add it as a js object. However, suppose we have more than one button and we want to select another button on the page, we can do this by adding a label such as a class or an id to target it more specifically. for example:
	<button class="js-button"> Click me </button>
	<script>
		document.querySelector(".js-button");
	</script>

Basically, the DOM is the sit of manipulation and interactivity when working on a web project in JS.
NOTE: All HTML element can have a innerHTML reference in javascript e.g: document.querySelector("button").innerHTML; This will select whatever is inside the button. for example, supposing the button is <button>hello</button>, if adding innerHTML to the query selector will give us Hello. Whereas, just selectin button element will give us the full tag like it is in the HTML i.e <button>hello</button>.

#### DOM project 1(Subscribe button)######
Let's develeop a small project that changes the youtube button to subscribed for new user when they click it and subscribe when they click it again. Here is a rundown of how that works:
Step 1: create the button in HTML
Step 2: add the onclick attribute to the HTML button
step 3: inside the onclick attribute, let's create a variable to help us determine what happens and so we can use it again. the button needs to point to this button when created, but to be sure, let's add specificity by giving it a class name.
step 4: let's create the variable and point it to the button using the document.querySelector.
step 5: Next, let's use the variable to create a conditional statement that checks:
    - if the innerHTML element of this button is subscribe, then it should change the .innerHTML to 'Subscribed'
    - and if it was 'Subscribed', it should change to 'Subscribe'

NOTE: make sure there is not space around the 'Subscribe' in the HTML button as this could create a bug that makes it look different to the JS conditional statement. However, if there is a space there add it too while checking the condtions. Another more starightforward solution will be to use .innerText while checking the conditions instead of innerHTML as this will only select the text and ignore everything else around it.

To make this code clean, we can simply put it in a function and call the function in the the onclick attribute.

#### DOM project 2(Adding score update to RPS)######
In this project, we will be updating the Rock, Paper, Scissor game with updated features that include:
    - the current scores
    - winners and losers
    - what each player choose

Let's begin with the scores. To display the score, we need to decide where we want to place the result. for this, let's add it under the scissors inside the html. so, here are the steps to make that come to life:
step 1: let's add a blank paragraph tag under the scissors.
step 2: to make it easy to target, let's add specificity.
step 3: after creating the paragraph, let's create a way to make it display the result but creating a query Selector that points to the paragraph and make it equals to the string we make before as a popup for displaying the result. NOTE: this has to be inside a backtick to make the parts works together.

furthermore, we need to add the information about the score at the top so it can display the result when we open for the first time; below the function for the score area; and inside the score reset function so it can display immediately after we reset the score.

note: all the response are added inside the gameMode Function since that where the response comes from once the game is in play.

#### DOM project 3(Amazon Shipping Calculator)######
In this project, we want to calculate the shipping fee for a given order using this format:
    - if the order is less than $40, then we add a $10 shipping fee
    - but if it's more than $40, it is feature

Working with input opens up a new issue because unlike other elements that we've interacted with before, input element does not have an innerHTML. Hence, to select the element inside an input field, we use the .value i.e document.querySelector('input').value

For this project, the steps are as follows:
step 1: create the basic text for the project.
step 2: create an input field and a button.
step 3: add an onclick attribute to the button to perform the function of calculating when a user enters a value
step 4: create a function that holds the logic for the transaction i.e:
    - if the user enter less than $40, add $10 and return the result under the input field
    - if the user enter more than $40, return the same amount under the input field
    - else tell the user to enter a valid number.

Here are some things to note about this task:
    - we can create a variable to hold the value so it is easy to check the value with 40.
    - since we will be adding 10 to this value, we need to create the variable with let instead of const
    - the input will be returned as a string which will give wrong result, hence, to do math with it we need to convert it to a number by wrapping the input value in the Number method i.e Number(input.value).

   We can make our input work with the press of the enter button by using the event.key attribute. The event attribute is an onkeydown attribute i.e instead of onclick, we can say onkeydown which listens for keypress event. to make our project respond to the Enter event, we can say:
    onkeydown="
        if(event.key === 'Enter'){
            ...
        } 
we can simply put what we want to happen between the if statement.

just like the Number method that we use to convert a string to an integer, we can also use the String method to convert an integer to a string. This follows the same pattern with the Number method i.e.:
    String(varName) or simply, String(43);

This will convert the integer into a string. However, there is an important point to note in JS that relates to type coersion, in that when we perform an operation on a string, if the string is entirely an integer (e.g '23'), javascript will automatically convert it to an integer and perform a mathematical operation on it. For example, 
    console.log('34' - 14)
Even though this is an operation involving two different datatypes, it will automatically convert the 34 to an integer and log 20 as a result on the console. However, this method is not advisable due to the shitty behavior of javascript because even though all other mathematical operation works fine with this method, addition will give a totally different result.

if we try to do addition with the above example using the string and number together, we will get 3414. This is because, instead of add, it concatenates the two values.

###### Working together (HTML, CSS, and Javascript)

One important DOM feature to note when connecting CSS to HTML using javascript is the classList method. The classList is a method with additional features i.e it also has method inside it that we can use when using the class list method. one of those methods is the add() that we can use add a new class to an html document only in special circumstance. e.g taking a step back to the youtube subscribe button project we did, suppose we can to add a new class to our button when it is clicked, the process will be as follows:
    buttonElement.classList.add('isSubscribed');
This will add the new classList to the HTML document only when it clicked and it is on subscribed.
The opposite of the .add() method is .remove().
One last method form the classList is the .contains() which we can use to check if an HTML contains a named class or not.