###### Using Equality Operator in JS ######

When we use double equal sign (==) in javascript, it does something called auto-conversion which converts the two objects to the same datatype and then compares them. However, this is not a really good thing in all cases. Here is an example to illustrate this point:
    suppose we have two values 5 and '5.00', logically, this two objects are not the same as one is a string while the other is a number. But, when we compare then using double equals to, it will return "true" because it converts the two to the same type and then see if the values are the same.

To remedy this kind of problem in javascript, that is why we use the triple equals to (===) operator to prevent auto conversion.

Foot Note: comparison operators (<,>, =, !) have a lower priority than math operators (+,-,*,/). However it has a greater priority to the logical operaters (&&, ||, !).

#### ROCK, PAPER, SCISSORS #####

Rock BEAT Scissors
Paper BEAT Rock
Scissors BEAT Paper

To generate a random number in js, we use the Math.random function. The Math.random function generates number between 0 and 1 i.e greater than zero but less than 1.

To use this for the rock paper Scissors, we need to check each of the computer generated random value with each of the game mode. Here is a good way for that to play out: if the number generated by random is less than 1/3, then we call it rock; if it is greater then 1/3 but less than 2/3 (i.e > 1/3 && <2/3), then we call it paper; lastly, if this value is greater than 2/3, then it will be scissors.

footnote: NaN = Not a Number; this happens when we try to do an invalid math operation such as dividing a string by a number. Furthermore, to declare an uninitialized variable, we can only do that with var and let. if we use const to declare an uninitialized variable, it will run into an error, to do that, we need to assign the variable a value of undefined. e.g
    const myVar = undefined;


#### CATCH THIS ##########

a ternary operator is a shorthand if-else statement. it works as follows: if the first part is a true statement, then the result will be the statement that follows immendiately after the question mark. Else, the result is the statement after the colon.
e.g: 1 > 0 ? 'this is true' : 'this is a false statement' 

####### Object Orineted Programming ########

to declare an object, we use the syntax:
    const name = {
        key: value,
        key: value,
        ...
    };

it is important to terminate it with a semicolon to signal the end of the object. To access this object we use:
1. The dot notation eg name.key this will fetch the value of the amed object key. 
2. The bracket notation e.g name['key']. The two method works the same way but the dot notation has a setback that makes the square notation handy in some situations. For example suppose our key name is hyphenated e.g my-key, if we try to access it using the dot notaion i.e
    name.my-key
you might run into an erro because javascript could attempt to perfom a mathematical operation on it. in this kind of sceario, the square notation is the best option to go with i.e
    name['my-key']

PS: We also need to use the square notation when using a key name that requires an hyphen when creating an object. e.g
    const name = {
        key: value,
        ['my-key']: value
    }
without the square bracket, you might fall into an uncaught syntax error. But, a simple point to note here is that it wil also work without the sqaure bracket if we turn it to a string i.e
    const name = {
        key: value,
        'my-key': value
    }

Furthermore, we can also add any kind of datatype inside an object such as int, string, boolean etc. but this does not remove objects as well. What this mean is that we also add another object inside an object known as nested object. e.g:
    const name = {
        key: value,
        ['my-key']: value
        rating: {
            stars: 4.5,
            count: 87
        }
    };
and also functions as well. e.g:
    const name = {
        key: value,
        ['my-key']: value
        rating: {
            stars: 4.5,
            count: 87
        } 
        fname: function my_func(){
            console.log('hello world');
        }
    };

to call the function, we use the object name followed by the function name i.e:
    name.fname();
with this example, we will realize that console.log is an example of object with function as console is the name of the object while log is a function inside it. This kind of object-function relationship is known as an object.


##### JSON ##########